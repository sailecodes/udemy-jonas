/* --- Top-level Style --- */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  color: #444;
  font-family: sans-serif;
  border-top: 10px solid #1098ad;
  position: relative;
}

.container {
  width: 1200px;
  margin: 0 auto;
}

.main-header {
  background-color: #f7f7f7;
  padding: 20px 40px;
  /* margin-bottom: 60px; */
  /* height: 80px; */
}

nav {
  font-size: 18px;
  /* text-align: center; */
}

article {
  /* margin-bottom: 60px; */
}

.post-header {
  margin-bottom: 40px;
}

aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  padding: 50px 40px;
}

/* SMALLER ELEMENTS */

h1,
h2,
h3 {
  color: #1098ad;
}

h1 {
  font-size: 26px;
  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
}

h3 {
  font-size: 30px;
  margin-bottom: 20px;
  margin-top: 40px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
  margin-bottom: 30px;
}

p {
  font-size: 22px;
  line-height: 1.5;
  margin-bottom: 15px;
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

li {
  font-size: 20px;
  margin-bottom: 10px;
}

li:last-child {
  margin-bottom: 0;
}

#author {
  font-style: italic;
  font-size: 18px;
}

#copyright {
  font-size: 16px;
}

.related-author {
  font-size: 18px;
  font-weight: bold;
}

.related {
  list-style: none;
  margin-left: 0;
}

li:first-child {
  font-weight: bold;
}

li:last-child {
  font-style: italic;
}

/* --- Link Styles --- */

a:link {
  color: #1098ad;
  text-decoration: none;
}

a:visited {
  color: #1098ad;
}

a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline orangered;
}

a:active {
  background-color: black;
  font-style: italic;
}

.post-img {
  width: 100%;
  height: auto;
}

nav a:link {
  margin-right: 30px;
  display: inline-block;
}

nav a:link:last-child {
  margin-right: 0;
}

button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;
  position: absolute;
  bottom: 50px;
  right: 50px;
}

h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

/* h3 + p::first-line {
} */

h2 {
  position: relative;
}

h2::after {
  content: "TOP";
  background-color: #ffe70e;
  color: #444;
  font-size: 16px;
  font-weight: bold;
  display: inline-block;
  padding: 5px 10px;
  position: absolute;
  top: -10px;
  right: -25px;
}

/* FLOATS PRACTICE */

/* .author-img {
  float: left;
  margin-bottom: 20px;
}

.author {
  float: left;
  margin-top: 10px;
  margin-left: 20px;
}

h1 {
  float: left;
}

nav {
  float: right;
}

.clear {
  clear: both;
}

.clearfix::after {
  clear: both;
  content: "";
  display: block;
}

article {
  width: 825px;
  float: left;
}

aside {
  width: 300px;
  float: right;
}

footer {
  clear: both;
} */

/* ----- */

/* ----- FLEXBOX ----- */

.main-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.author-box {
  display: flex;
  align-items: center;
  margin-bottom: 15px;
}

.author {
  margin-bottom: 0;
  margin-left: 15px;
}

.related-post {
  display: flex;
  align-items: center;
  /* gap isn't supported by many versions BUT good to use */
  gap: 20px;
  margin-bottom: 30px;
}

.related-link:link {
  font-size: 17px;
  font-weight: bold;
  font-style: normal;
  /* margin-bottom does not by default work on inline elements
    so must state 'display: block' or 'display: inline-block' */
  margin-bottom: 5px;
  display: block;
}

.related-author {
  margin-bottom: 0;
  font-size: 14px;
  font-weight: normal;
  font-style: italic;
}

/* Without 'align-items: flex-start', the vertical-length of
     the aside element is equal to the article. This is the
     default behavior of flexbox. 'flex-start' places the flex
     items at the top, only needing as much space for their
     content. */
/*.row {
  display: flex;
  align-items: flex-start;
  gap: 75px;
  margin-bottom: 60px;
}*/

/* Before we had 'flex: 0 0 825px' for article and
     'flex: 0 0 300px' for aside. This resulted in a remaining
     space of 75px, which we defined in .row as the gap between
     the two flex items, article and aside. However, to avoid
     the extra step of calculating for either (or in this case
     article), we can do 'flex: 1' GIVEN that we have defined
     the horizontal-length of aside and the length of gap.
     Meaning, out of the 1200px available in the container row,
     article will be given a width of exactly 825, which is what
     we want. */
/*article {
  flex: 1;
  margin-bottom: 0;
}*/

/* Before, we had: 'flex-basis: 300px'. However, flexbox
     automatically shrinks flex items to fit within the
     container. So, we need 'flex-shrink: 1'.
     
     Here, we use the 'flex' shortcut. Recall that this means:
        flex-grow: 0
        flex-shrink: 1
        flex-basis: auto */
/*aside {
  flex: 0 0 300px;
}*/

/* ----- CSS GRID LAYOUT ----- */

.container {
  display: grid;
  grid-template-columns: 1fr 300px;
  column-gap: 75px;
  row-gap: 60px;
  align-items: start;
}

.main-header {
  grid-column: 1 / -1;
}

article {
}

aside {
}

footer {
  grid-column: 1 / -1;
}
